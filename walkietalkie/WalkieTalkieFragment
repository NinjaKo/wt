package wt.walkietalkie;

import android.app.Fragment;
import android.app.FragmentManager;
import android.app.ProgressDialog;
import android.media.AudioTrack;
import android.net.wifi.p2p.WifiP2pDevice;
import android.net.wifi.p2p.WifiP2pInfo;
import android.net.wifi.p2p.WifiP2pManager.ConnectionInfoListener;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.StrictMode;
import android.os.StrictMode.ThreadPolicy.Builder;
import android.os.StrictMode.VmPolicy.Builder;
import android.text.Editable;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import java.util.Observable;
import java.util.Observer;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import wt.control.ButtonListner;
import wt.control.TalkerButtonOnTouchListner;
import wt.walkietalkie.manager.FreqManager;
import wt.walkietalkie.manager.Node;
import wt.walkietalkie.manager.Node.MessageToObserver;
import wt.walkietalkie.manager.Node.PacketToObserver;
import wt.wifidirect.WiFiDirectActivity;

public class WalkieTalkieFragment extends Fragment
  implements WifiP2pManager.ConnectionInfoListener, Observer
{
  private static final int RECORDER_AUDIO_ENCODING = 2;
  private static final int RECORDER_CHANNELS = 12;
  private static final int RECORDER_SAMPLERATE = 8000;
  private AudioTrack audioPlayer = null;
  private int bufferPlaySize = 0;
  private Button connectBtn;
  private Button freqIDButton;
  private EditText freqIDText;
  private FreqManager gManager;
  private boolean isMuted;
  private boolean isWalkieTalkieEnabled = false;
  private volatile boolean keepPlaying = true;
  private View mContentView = null;
  private String myFreqID;
  public Node node = null;
  private AsyncTask<Void, Void, Integer> playTaskThread = null;
  ProgressDialog progressDialog = null;
  private Queue<AudioMessage> receivedMessages;
  private Button talkButton;

  private void addAudioMessage(String paramString, byte[] paramArrayOfByte)
  {
    Log.d("Walkie Talkie", "Received&Add audio message !!!! from " + paramString);
    this.receivedMessages.add(new AudioMessage(paramString, paramArrayOfByte));
    synchronized (this.receivedMessages)
    {
      this.receivedMessages.notify();
      return;
    }
  }

  public void disableTalkButton()
  {
    this.talkButton.setEnabled(false);
    this.talkButton.setBackgroundResource(2130837513);
  }

  public void disconnectPeers()
  {
    ((DeviceListFragment.DeviceActionListener)getActivity()).disconnect();
    setIsWalkieTalkieEbled(false);
  }

  public boolean discoverPeers()
  {
    ((DeviceListFragment.DeviceActionListener)getActivity()).discoverMyPeers();
    return true;
  }

  public void enableTalkButton()
  {
    this.talkButton.setEnabled(true);
    this.talkButton.setBackgroundResource(2130837518);
  }

  public FreqManager getFreqManager()
  {
    return this.gManager;
  }

  public boolean getIsWalkieTalkieEbled()
  {
    return this.isWalkieTalkieEnabled;
  }

  public String getMyFreqID()
  {
    return this.myFreqID;
  }

  public void onActivityCreated(Bundle paramBundle)
  {
    super.onActivityCreated(paramBundle);
    StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder().detectDiskReads().detectDiskWrites().detectNetwork().penaltyLog().build());
    StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder().detectLeakedSqlLiteObjects().detectLeakedClosableObjects().penaltyLog().penaltyDeath().build());
    this.receivedMessages = new ConcurrentLinkedQueue();
    this.gManager = new FreqManager();
  }

  public void onConnectionInfoAvailable(WifiP2pInfo paramWifiP2pInfo)
  {
    if (paramWifiP2pInfo.groupFormed)
    {
      this.gManager.setMyInfo(paramWifiP2pInfo);
      ((WalkieTalkieFragment)getFragmentManager().findFragmentById(2131230727)).onConnectionInfoAvailable(paramWifiP2pInfo, ((WiFiDirectActivity)getActivity()).getDevice(), this.gManager);
    }
  }

  public void onConnectionInfoAvailable(WifiP2pInfo paramWifiP2pInfo, DeviceInfo paramDeviceInfo, FreqManager paramFreqManager)
  {
    if (paramWifiP2pInfo.groupFormed)
    {
      Log.d("Walkie Talkie", "on Connection Info Available!!");
      if (this.node == null)
      {
        this.node = new Node();
        this.node.addObserver(this);
      }
      this.node.setNode(paramFreqManager, paramDeviceInfo.getDevice().deviceName, paramDeviceInfo.getFreqID(), paramWifiP2pInfo);
      this.node.startRun();
      this.keepPlaying = true;
      this.playTaskThread = new playAudioTask(null);
      this.playTaskThread.execute(new Void[0]);
      enableTalkButton();
    }
  }

  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    this.mContentView = paramLayoutInflater.inflate(2130903046, null);
    ButtonListner localButtonListner = new ButtonListner(getActivity());
    this.connectBtn = ((Button)this.mContentView.findViewById(2131230721));
    this.connectBtn.setOnClickListener(localButtonListner);
    TalkerButtonOnTouchListner localTalkerButtonOnTouchListner = new TalkerButtonOnTouchListner(getActivity());
    this.talkButton = ((Button)this.mContentView.findViewById(2131230723));
    this.talkButton.setOnTouchListener(localTalkerButtonOnTouchListner);
    disableTalkButton();
    return this.mContentView;
  }

  public void resetWalkieTalkie()
  {
    Log.d("Walkie Talkie", "reset WalkieTalkie!!");
    this.keepPlaying = false;
    setIsWalkieTalkieEbled(false);
    if (this.audioPlayer != null)
      this.audioPlayer.stop();
    if (this.playTaskThread != null)
      this.playTaskThread.cancel(true);
    if (this.node != null)
      this.node.stopRun();
  }

  public void sendMsg(int paramInt1, int paramInt2, byte[] paramArrayOfByte)
  {
    this.node.sendMsg(paramInt1, paramInt2, paramArrayOfByte);
    Log.d("Walkie Talkie", "Send audio message: initFlg:" + paramInt1 + " seq:" + paramInt2);
  }

  public void setIsWalkieTalkieEbled(boolean paramBoolean)
  {
    this.isWalkieTalkieEnabled = paramBoolean;
    if (!paramBoolean)
    {
      this.connectBtn.setBackgroundResource(2130837504);
      disableTalkButton();
      return;
    }
    this.connectBtn.setBackgroundResource(2130837506);
    this.myFreqID = "1234";
    enableTalkButton();
  }

  public void setMyFreqID()
  {
    Log.d("Walkie Talkie", "My freqID:" + this.freqIDText.getText().toString());
    this.myFreqID = "1234";
    this.node.setFreqID(this.myFreqID);
  }

  public void startPlay()
  {
    this.isMuted = false;
  }

  public void stopPlay()
  {
    this.isMuted = true;
  }

  public void update(Observable paramObservable, Object paramObject)
  {
    Node.MessageToObserver localMessageToObserver = (Node.MessageToObserver)paramObject;
    switch (localMessageToObserver.getMessageType())
    {
    default:
      return;
    case 7:
    }
    addAudioMessage(((Node.PacketToObserver)localMessageToObserver).getTalkerName(), (byte[])localMessageToObserver.getContainedData());
  }

  private class AudioMessage
  {
    private byte[] data;
    private String talker;

    public AudioMessage(String paramArrayOfByte, byte[] arg3)
    {
      this.talker = paramArrayOfByte;
      Object localObject;
      this.data = localObject;
    }
  }

  private class playAudioTask extends AsyncTask<Void, Void, Integer>
  {
    int playReturn;

    private playAudioTask()
    {
    }

    // ERROR //
    protected Integer doInBackground(Void[] paramArrayOfVoid)
    {
    }

    protected void onPreExecute()
    {
      WalkieTalkieFragment.this.bufferPlaySize = AudioTrack.getMinBufferSize(8000, 12, 2);
      WalkieTalkieFragment.this.audioPlayer = new AudioTrack(3, 8000, 12, 2, WalkieTalkieFragment.this.bufferPlaySize, 1);
      float f = (float)(0.8D * AudioTrack.getMaxVolume());
      WalkieTalkieFragment.this.audioPlayer.setStereoVolume(f, f);
      if (WalkieTalkieFragment.this.audioPlayer.getPlayState() != 3)
        WalkieTalkieFragment.this.audioPlayer.play();
    }
  }
}

